CGAAL is a model checker of ATL properties on CGS models using both on-the-fly generation of the model and on-the-fly model checking. We show that having a local algorithm, that only explores the model as required and by distributing the load onto multiple threads, creates a fast reliable model checker, competitive with the already established model checkers in the field in terms of performance and memory efficiency.

We have implemented multiple optimisations for the CGAAL, which includes the search strategies breadth-first search and depth-first search as well as the linear constraint distance heuristic, the linear programming heuristic, and dependency heuristic search. Furthermore, we have introduced support for the ATL file format and functionality for computing partial game strategies proving properties on the form $\enforce A \psi$.

We have designed and implemented the minimum solve set algorithm, which for each configuration in an extended dependency graph finds the smallest set of configurations that needs a certain-zero assignment in order to assign the given configuration. This algorithm can be used to analyse EDGs to gain a better knowledge of optimal search strategies or heuristics. We ran the minimum solve set algorithm on different case studies, which resulted in the confirmation of already presumed local patterns.

All the optimisations were benchmarked and compared across 39 case studies and 108 generated cases. We found that the dependency heuristic search performed best overall followed by the breadth-first search. We believe the dependency heuristic search performs well because it behaves similar to breadth-first search, which also has good performance, but it can also go into depth where configurations matter more. In addition, the dependency heuristic search introduces only a small overhead. Linear constraint distance heuristic and linear programming heuristic performed overall worst, but when used in cases with linear properties, they can in some cases perform up to 25% better than breadth-first search. We also implemented a single-threaded version of the global algorithm and evaluated the local algorithm against it only to confirm the results presented by Dalsgaard~et~al.~\cite{dalsgaard} and Finnemann~et~al.~\cite{weightedCTL}. The local algorithm performs better in practise despite poorer worst-case running time than the global algorithm. The global algorithm performed so poorly that we could not run the whole benchmark suite on it, as we did for the other search strategies mentioned. We can conclude that CGAAL has improved in terms of performance and usability since our 7th-semester project, but for CGAAL to be competitive with other model checkers there are still some features lacking, such as GUI, better compile-time errors, and complete support for computation of partial game strategies.
